// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testPersons(t *testing.T) {
	t.Parallel()

	query := Persons(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPersonsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	person := &Person{}
	if err = randomize.Struct(seed, person, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = person.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = person.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Persons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPersonsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	person := &Person{}
	if err = randomize.Struct(seed, person, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = person.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Persons(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Persons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPersonsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	person := &Person{}
	if err = randomize.Struct(seed, person, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = person.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PersonSlice{person}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Persons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPersonsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	person := &Person{}
	if err = randomize.Struct(seed, person, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = person.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PersonExists(tx, person.ID)
	if err != nil {
		t.Errorf("Unable to check if Person exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PersonExistsG to return true, but got false.")
	}
}
func testPersonsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	person := &Person{}
	if err = randomize.Struct(seed, person, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = person.Insert(tx); err != nil {
		t.Error(err)
	}

	personFound, err := FindPerson(tx, person.ID)
	if err != nil {
		t.Error(err)
	}

	if personFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPersonsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	person := &Person{}
	if err = randomize.Struct(seed, person, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = person.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Persons(tx).Bind(person); err != nil {
		t.Error(err)
	}
}

func testPersonsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	person := &Person{}
	if err = randomize.Struct(seed, person, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = person.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Persons(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPersonsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	personOne := &Person{}
	personTwo := &Person{}
	if err = randomize.Struct(seed, personOne, personDBTypes, false, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}
	if err = randomize.Struct(seed, personTwo, personDBTypes, false, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = personOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = personTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Persons(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPersonsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	personOne := &Person{}
	personTwo := &Person{}
	if err = randomize.Struct(seed, personOne, personDBTypes, false, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}
	if err = randomize.Struct(seed, personTwo, personDBTypes, false, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = personOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = personTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Persons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func personBeforeInsertHook(e boil.Executor, o *Person) error {
	*o = Person{}
	return nil
}

func personAfterInsertHook(e boil.Executor, o *Person) error {
	*o = Person{}
	return nil
}

func personAfterSelectHook(e boil.Executor, o *Person) error {
	*o = Person{}
	return nil
}

func personBeforeUpdateHook(e boil.Executor, o *Person) error {
	*o = Person{}
	return nil
}

func personAfterUpdateHook(e boil.Executor, o *Person) error {
	*o = Person{}
	return nil
}

func personBeforeDeleteHook(e boil.Executor, o *Person) error {
	*o = Person{}
	return nil
}

func personAfterDeleteHook(e boil.Executor, o *Person) error {
	*o = Person{}
	return nil
}

func personBeforeUpsertHook(e boil.Executor, o *Person) error {
	*o = Person{}
	return nil
}

func personAfterUpsertHook(e boil.Executor, o *Person) error {
	*o = Person{}
	return nil
}

func testPersonsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Person{}
	o := &Person{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, personDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Person object: %s", err)
	}

	AddPersonHook(boil.BeforeInsertHook, personBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	personBeforeInsertHooks = []PersonHook{}

	AddPersonHook(boil.AfterInsertHook, personAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	personAfterInsertHooks = []PersonHook{}

	AddPersonHook(boil.AfterSelectHook, personAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	personAfterSelectHooks = []PersonHook{}

	AddPersonHook(boil.BeforeUpdateHook, personBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	personBeforeUpdateHooks = []PersonHook{}

	AddPersonHook(boil.AfterUpdateHook, personAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	personAfterUpdateHooks = []PersonHook{}

	AddPersonHook(boil.BeforeDeleteHook, personBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	personBeforeDeleteHooks = []PersonHook{}

	AddPersonHook(boil.AfterDeleteHook, personAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	personAfterDeleteHooks = []PersonHook{}

	AddPersonHook(boil.BeforeUpsertHook, personBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	personBeforeUpsertHooks = []PersonHook{}

	AddPersonHook(boil.AfterUpsertHook, personAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	personAfterUpsertHooks = []PersonHook{}
}
func testPersonsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	person := &Person{}
	if err = randomize.Struct(seed, person, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = person.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Persons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPersonsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	person := &Person{}
	if err = randomize.Struct(seed, person, personDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = person.Insert(tx, personColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Persons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPersonToManyTransactions(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Person
	var b, c Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, transactionDBTypes, false, transactionColumnsWithDefault...)
	randomize.Struct(seed, &c, transactionDBTypes, false, transactionColumnsWithDefault...)

	b.PersonID = a.ID
	c.PersonID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	transaction, err := a.Transactions(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range transaction {
		if v.PersonID == b.PersonID {
			bFound = true
		}
		if v.PersonID == c.PersonID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PersonSlice{&a}
	if err = a.L.LoadTransactions(tx, false, (*[]*Person)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Transactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Transactions = nil
	if err = a.L.LoadTransactions(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Transactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", transaction)
	}
}

func testPersonToManyAddOpTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Person
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Transaction{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTransactions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PersonID {
			t.Error("foreign key was wrong value", a.ID, first.PersonID)
		}
		if a.ID != second.PersonID {
			t.Error("foreign key was wrong value", a.ID, second.PersonID)
		}

		if first.R.Person != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Person != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Transactions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Transactions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Transactions(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPersonsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	person := &Person{}
	if err = randomize.Struct(seed, person, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = person.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = person.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPersonsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	person := &Person{}
	if err = randomize.Struct(seed, person, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = person.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PersonSlice{person}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPersonsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	person := &Person{}
	if err = randomize.Struct(seed, person, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = person.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Persons(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	personDBTypes = map[string]string{`Fullname`: `varchar`, `ID`: `smallint`}
	_             = bytes.MinRead
)

func testPersonsUpdate(t *testing.T) {
	t.Parallel()

	if len(personColumns) == len(personPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	person := &Person{}
	if err = randomize.Struct(seed, person, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = person.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Persons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, person, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	if err = person.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPersonsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(personColumns) == len(personPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	person := &Person{}
	if err = randomize.Struct(seed, person, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = person.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Persons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, person, personDBTypes, true, personPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(personColumns, personPrimaryKeyColumns) {
		fields = personColumns
	} else {
		fields = strmangle.SetComplement(
			personColumns,
			personPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(person))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PersonSlice{person}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPersonsUpsert(t *testing.T) {
	t.Parallel()

	if len(personColumns) == len(personPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	person := Person{}
	if err = randomize.Struct(seed, &person, personDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = person.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Person: %s", err)
	}

	count, err := Persons(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &person, personDBTypes, false, personPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	if err = person.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Person: %s", err)
	}

	count, err = Persons(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
