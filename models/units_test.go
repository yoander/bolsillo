// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testUnits(t *testing.T) {
	t.Parallel()

	query := Units(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testUnitsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	unit := &Unit{}
	if err = randomize.Struct(seed, unit, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = unit.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = unit.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Units(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUnitsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	unit := &Unit{}
	if err = randomize.Struct(seed, unit, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = unit.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Units(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Units(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUnitsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	unit := &Unit{}
	if err = randomize.Struct(seed, unit, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = unit.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UnitSlice{unit}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Units(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testUnitsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	unit := &Unit{}
	if err = randomize.Struct(seed, unit, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = unit.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := UnitExists(tx, unit.ID)
	if err != nil {
		t.Errorf("Unable to check if Unit exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UnitExistsG to return true, but got false.")
	}
}
func testUnitsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	unit := &Unit{}
	if err = randomize.Struct(seed, unit, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = unit.Insert(tx); err != nil {
		t.Error(err)
	}

	unitFound, err := FindUnit(tx, unit.ID)
	if err != nil {
		t.Error(err)
	}

	if unitFound == nil {
		t.Error("want a record, got nil")
	}
}
func testUnitsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	unit := &Unit{}
	if err = randomize.Struct(seed, unit, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = unit.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Units(tx).Bind(unit); err != nil {
		t.Error(err)
	}
}

func testUnitsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	unit := &Unit{}
	if err = randomize.Struct(seed, unit, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = unit.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Units(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUnitsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	unitOne := &Unit{}
	unitTwo := &Unit{}
	if err = randomize.Struct(seed, unitOne, unitDBTypes, false, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}
	if err = randomize.Struct(seed, unitTwo, unitDBTypes, false, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = unitOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = unitTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Units(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUnitsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	unitOne := &Unit{}
	unitTwo := &Unit{}
	if err = randomize.Struct(seed, unitOne, unitDBTypes, false, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}
	if err = randomize.Struct(seed, unitTwo, unitDBTypes, false, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = unitOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = unitTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Units(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func unitBeforeInsertHook(e boil.Executor, o *Unit) error {
	*o = Unit{}
	return nil
}

func unitAfterInsertHook(e boil.Executor, o *Unit) error {
	*o = Unit{}
	return nil
}

func unitAfterSelectHook(e boil.Executor, o *Unit) error {
	*o = Unit{}
	return nil
}

func unitBeforeUpdateHook(e boil.Executor, o *Unit) error {
	*o = Unit{}
	return nil
}

func unitAfterUpdateHook(e boil.Executor, o *Unit) error {
	*o = Unit{}
	return nil
}

func unitBeforeDeleteHook(e boil.Executor, o *Unit) error {
	*o = Unit{}
	return nil
}

func unitAfterDeleteHook(e boil.Executor, o *Unit) error {
	*o = Unit{}
	return nil
}

func unitBeforeUpsertHook(e boil.Executor, o *Unit) error {
	*o = Unit{}
	return nil
}

func unitAfterUpsertHook(e boil.Executor, o *Unit) error {
	*o = Unit{}
	return nil
}

func testUnitsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Unit{}
	o := &Unit{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, unitDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Unit object: %s", err)
	}

	AddUnitHook(boil.BeforeInsertHook, unitBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	unitBeforeInsertHooks = []UnitHook{}

	AddUnitHook(boil.AfterInsertHook, unitAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	unitAfterInsertHooks = []UnitHook{}

	AddUnitHook(boil.AfterSelectHook, unitAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	unitAfterSelectHooks = []UnitHook{}

	AddUnitHook(boil.BeforeUpdateHook, unitBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	unitBeforeUpdateHooks = []UnitHook{}

	AddUnitHook(boil.AfterUpdateHook, unitAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	unitAfterUpdateHooks = []UnitHook{}

	AddUnitHook(boil.BeforeDeleteHook, unitBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	unitBeforeDeleteHooks = []UnitHook{}

	AddUnitHook(boil.AfterDeleteHook, unitAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	unitAfterDeleteHooks = []UnitHook{}

	AddUnitHook(boil.BeforeUpsertHook, unitBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	unitBeforeUpsertHooks = []UnitHook{}

	AddUnitHook(boil.AfterUpsertHook, unitAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	unitAfterUpsertHooks = []UnitHook{}
}
func testUnitsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	unit := &Unit{}
	if err = randomize.Struct(seed, unit, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = unit.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Units(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUnitsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	unit := &Unit{}
	if err = randomize.Struct(seed, unit, unitDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = unit.Insert(tx, unitColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Units(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUnitToManyTransactions(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Unit
	var b, c Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, transactionDBTypes, false, transactionColumnsWithDefault...)
	randomize.Struct(seed, &c, transactionDBTypes, false, transactionColumnsWithDefault...)

	b.UnitID.Valid = true
	c.UnitID.Valid = true
	b.UnitID.Uint8 = a.ID
	c.UnitID.Uint8 = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	transaction, err := a.Transactions(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range transaction {
		if v.UnitID.Uint8 == b.UnitID.Uint8 {
			bFound = true
		}
		if v.UnitID.Uint8 == c.UnitID.Uint8 {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UnitSlice{&a}
	if err = a.L.LoadTransactions(tx, false, (*[]*Unit)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Transactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Transactions = nil
	if err = a.L.LoadTransactions(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Transactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", transaction)
	}
}

func testUnitToManyUnits(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Unit
	var b, c Unit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, unitDBTypes, false, unitColumnsWithDefault...)
	randomize.Struct(seed, &c, unitDBTypes, false, unitColumnsWithDefault...)

	b.UnitID.Valid = true
	c.UnitID.Valid = true
	b.UnitID.Uint8 = a.ID
	c.UnitID.Uint8 = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	unit, err := a.Units(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range unit {
		if v.UnitID.Uint8 == b.UnitID.Uint8 {
			bFound = true
		}
		if v.UnitID.Uint8 == c.UnitID.Uint8 {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UnitSlice{&a}
	if err = a.L.LoadUnits(tx, false, (*[]*Unit)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Units); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Units = nil
	if err = a.L.LoadUnits(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Units); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", unit)
	}
}

func testUnitToManyAddOpTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Unit
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, unitDBTypes, false, strmangle.SetComplement(unitPrimaryKeyColumns, unitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Transaction{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTransactions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.UnitID.Uint8 {
			t.Error("foreign key was wrong value", a.ID, first.UnitID.Uint8)
		}
		if a.ID != second.UnitID.Uint8 {
			t.Error("foreign key was wrong value", a.ID, second.UnitID.Uint8)
		}

		if first.R.Unit != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Unit != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Transactions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Transactions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Transactions(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUnitToManySetOpTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Unit
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, unitDBTypes, false, strmangle.SetComplement(unitPrimaryKeyColumns, unitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetTransactions(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Transactions(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTransactions(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Transactions(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.UnitID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.UnitID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.UnitID.Uint8 {
		t.Error("foreign key was wrong value", a.ID, d.UnitID.Uint8)
	}
	if a.ID != e.UnitID.Uint8 {
		t.Error("foreign key was wrong value", a.ID, e.UnitID.Uint8)
	}

	if b.R.Unit != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Unit != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Unit != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Unit != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Transactions[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Transactions[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUnitToManyRemoveOpTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Unit
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, unitDBTypes, false, strmangle.SetComplement(unitPrimaryKeyColumns, unitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddTransactions(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Transactions(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTransactions(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Transactions(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.UnitID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.UnitID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Unit != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Unit != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Unit != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Unit != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Transactions) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Transactions[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Transactions[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUnitToManyAddOpUnits(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Unit
	var b, c, d, e Unit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, unitDBTypes, false, strmangle.SetComplement(unitPrimaryKeyColumns, unitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Unit{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, unitDBTypes, false, strmangle.SetComplement(unitPrimaryKeyColumns, unitColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Unit{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUnits(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.UnitID.Uint8 {
			t.Error("foreign key was wrong value", a.ID, first.UnitID.Uint8)
		}
		if a.ID != second.UnitID.Uint8 {
			t.Error("foreign key was wrong value", a.ID, second.UnitID.Uint8)
		}

		if first.R.Unit != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Unit != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Units[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Units[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Units(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUnitToManySetOpUnits(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Unit
	var b, c, d, e Unit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, unitDBTypes, false, strmangle.SetComplement(unitPrimaryKeyColumns, unitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Unit{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, unitDBTypes, false, strmangle.SetComplement(unitPrimaryKeyColumns, unitColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetUnits(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Units(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetUnits(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Units(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.UnitID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.UnitID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.UnitID.Uint8 {
		t.Error("foreign key was wrong value", a.ID, d.UnitID.Uint8)
	}
	if a.ID != e.UnitID.Uint8 {
		t.Error("foreign key was wrong value", a.ID, e.UnitID.Uint8)
	}

	if b.R.Unit != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Unit != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Unit != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Unit != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Units[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Units[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUnitToManyRemoveOpUnits(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Unit
	var b, c, d, e Unit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, unitDBTypes, false, strmangle.SetComplement(unitPrimaryKeyColumns, unitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Unit{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, unitDBTypes, false, strmangle.SetComplement(unitPrimaryKeyColumns, unitColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddUnits(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Units(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveUnits(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Units(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.UnitID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.UnitID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Unit != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Unit != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Unit != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Unit != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Units) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Units[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Units[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUnitToOneUnitUsingUnit(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Unit
	var foreign Unit

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, unitDBTypes, false, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	local.UnitID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.UnitID.Uint8 = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Unit(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UnitSlice{&local}
	if err = local.L.LoadUnit(tx, false, (*[]*Unit)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Unit == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Unit = nil
	if err = local.L.LoadUnit(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Unit == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUnitToOneSetOpUnitUsingUnit(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Unit
	var b, c Unit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, unitDBTypes, false, strmangle.SetComplement(unitPrimaryKeyColumns, unitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, unitDBTypes, false, strmangle.SetComplement(unitPrimaryKeyColumns, unitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, unitDBTypes, false, strmangle.SetComplement(unitPrimaryKeyColumns, unitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Unit{&b, &c} {
		err = a.SetUnit(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Unit != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Units[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UnitID.Uint8 != x.ID {
			t.Error("foreign key was wrong value", a.UnitID.Uint8)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UnitID.Uint8))
		reflect.Indirect(reflect.ValueOf(&a.UnitID.Uint8)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UnitID.Uint8 != x.ID {
			t.Error("foreign key was wrong value", a.UnitID.Uint8, x.ID)
		}
	}
}

func testUnitToOneRemoveOpUnitUsingUnit(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Unit
	var b Unit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, unitDBTypes, false, strmangle.SetComplement(unitPrimaryKeyColumns, unitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, unitDBTypes, false, strmangle.SetComplement(unitPrimaryKeyColumns, unitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUnit(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUnit(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Unit(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Unit != nil {
		t.Error("R struct entry should be nil")
	}

	if a.UnitID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Units) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUnitsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	unit := &Unit{}
	if err = randomize.Struct(seed, unit, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = unit.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = unit.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testUnitsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	unit := &Unit{}
	if err = randomize.Struct(seed, unit, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = unit.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UnitSlice{unit}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testUnitsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	unit := &Unit{}
	if err = randomize.Struct(seed, unit, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = unit.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Units(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	unitDBTypes = map[string]string{`BaseRelation`: `decimal`, `ID`: `tinyint`, `Name`: `varchar`, `Symbol`: `varchar`, `UnitID`: `tinyint`}
	_           = bytes.MinRead
)

func testUnitsUpdate(t *testing.T) {
	t.Parallel()

	if len(unitColumns) == len(unitPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	unit := &Unit{}
	if err = randomize.Struct(seed, unit, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = unit.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Units(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, unit, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	if err = unit.Update(tx); err != nil {
		t.Error(err)
	}
}

func testUnitsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(unitColumns) == len(unitPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	unit := &Unit{}
	if err = randomize.Struct(seed, unit, unitDBTypes, true, unitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = unit.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Units(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, unit, unitDBTypes, true, unitPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(unitColumns, unitPrimaryKeyColumns) {
		fields = unitColumns
	} else {
		fields = strmangle.SetComplement(
			unitColumns,
			unitPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(unit))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := UnitSlice{unit}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testUnitsUpsert(t *testing.T) {
	t.Parallel()

	if len(unitColumns) == len(unitPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	unit := Unit{}
	if err = randomize.Struct(seed, &unit, unitDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = unit.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Unit: %s", err)
	}

	count, err := Units(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &unit, unitDBTypes, false, unitPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Unit struct: %s", err)
	}

	if err = unit.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Unit: %s", err)
	}

	count, err = Units(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
