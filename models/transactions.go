// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Transaction is an object representing the database table.
type Transaction struct {
	ID          uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Type        string      `boil:"type" json:"type" toml:"type" yaml:"type"`
	Price       string      `boil:"price" json:"price" toml:"price" yaml:"price"`
	TotalPrice  string      `boil:"total_price" json:"total_price" toml:"total_price" yaml:"total_price"`
	InvoiceID   null.Uint   `boil:"invoice_id" json:"invoice_id,omitempty" toml:"invoice_id" yaml:"invoice_id,omitempty"`
	Date        time.Time   `boil:"date" json:"date" toml:"date" yaml:"date"`
	Note        string      `boil:"note" json:"note" toml:"note" yaml:"note"`
	UnitID      null.Uint8  `boil:"unit_id" json:"unit_id,omitempty" toml:"unit_id" yaml:"unit_id,omitempty"`
	Quantity    string      `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	PersonID    uint16      `boil:"person_id" json:"person_id" toml:"person_id" yaml:"person_id"`
	Deleted     null.Int8   `boil:"deleted" json:"deleted,omitempty" toml:"deleted" yaml:"deleted,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt   time.Time   `boil:"deleted_at" json:"deleted_at" toml:"deleted_at" yaml:"deleted_at"`

	R *transactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransactionColumns = struct {
	ID          string
	Description string
	Type        string
	Price       string
	TotalPrice  string
	InvoiceID   string
	Date        string
	Note        string
	UnitID      string
	Quantity    string
	PersonID    string
	Deleted     string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	Description: "description",
	Type:        "type",
	Price:       "price",
	TotalPrice:  "total_price",
	InvoiceID:   "invoice_id",
	Date:        "date",
	Note:        "note",
	UnitID:      "unit_id",
	Quantity:    "quantity",
	PersonID:    "person_id",
	Deleted:     "deleted",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

// transactionR is where relationships are stored.
type transactionR struct {
	Invoice *Invoice
	Person  *Person
	Unit    *Unit
	Tags    TagSlice
}

// transactionL is where Load methods for each relationship are stored.
type transactionL struct{}

var (
	transactionColumns               = []string{"id", "description", "type", "price", "total_price", "invoice_id", "date", "note", "unit_id", "quantity", "person_id", "deleted", "created_at", "updated_at", "deleted_at"}
	transactionColumnsWithoutDefault = []string{"description", "invoice_id", "date", "note", "unit_id", "person_id", "deleted_at"}
	transactionColumnsWithDefault    = []string{"id", "type", "price", "total_price", "quantity", "deleted", "created_at", "updated_at"}
	transactionPrimaryKeyColumns     = []string{"id"}
)

type (
	// TransactionSlice is an alias for a slice of pointers to Transaction.
	// This should generally be used opposed to []Transaction.
	TransactionSlice []*Transaction
	// TransactionHook is the signature for custom Transaction hook methods
	TransactionHook func(boil.Executor, *Transaction) error

	transactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transactionType                 = reflect.TypeOf(&Transaction{})
	transactionMapping              = queries.MakeStructMapping(transactionType)
	transactionPrimaryKeyMapping, _ = queries.BindMapping(transactionType, transactionMapping, transactionPrimaryKeyColumns)
	transactionInsertCacheMut       sync.RWMutex
	transactionInsertCache          = make(map[string]insertCache)
	transactionUpdateCacheMut       sync.RWMutex
	transactionUpdateCache          = make(map[string]updateCache)
	transactionUpsertCacheMut       sync.RWMutex
	transactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var transactionBeforeInsertHooks []TransactionHook
var transactionBeforeUpdateHooks []TransactionHook
var transactionBeforeDeleteHooks []TransactionHook
var transactionBeforeUpsertHooks []TransactionHook

var transactionAfterInsertHooks []TransactionHook
var transactionAfterSelectHooks []TransactionHook
var transactionAfterUpdateHooks []TransactionHook
var transactionAfterDeleteHooks []TransactionHook
var transactionAfterUpsertHooks []TransactionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Transaction) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Transaction) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Transaction) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Transaction) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Transaction) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Transaction) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Transaction) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Transaction) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Transaction) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTransactionHook registers your hook function for all future operations.
func AddTransactionHook(hookPoint boil.HookPoint, transactionHook TransactionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		transactionBeforeInsertHooks = append(transactionBeforeInsertHooks, transactionHook)
	case boil.BeforeUpdateHook:
		transactionBeforeUpdateHooks = append(transactionBeforeUpdateHooks, transactionHook)
	case boil.BeforeDeleteHook:
		transactionBeforeDeleteHooks = append(transactionBeforeDeleteHooks, transactionHook)
	case boil.BeforeUpsertHook:
		transactionBeforeUpsertHooks = append(transactionBeforeUpsertHooks, transactionHook)
	case boil.AfterInsertHook:
		transactionAfterInsertHooks = append(transactionAfterInsertHooks, transactionHook)
	case boil.AfterSelectHook:
		transactionAfterSelectHooks = append(transactionAfterSelectHooks, transactionHook)
	case boil.AfterUpdateHook:
		transactionAfterUpdateHooks = append(transactionAfterUpdateHooks, transactionHook)
	case boil.AfterDeleteHook:
		transactionAfterDeleteHooks = append(transactionAfterDeleteHooks, transactionHook)
	case boil.AfterUpsertHook:
		transactionAfterUpsertHooks = append(transactionAfterUpsertHooks, transactionHook)
	}
}

// OneP returns a single transaction record from the query, and panics on error.
func (q transactionQuery) OneP() *Transaction {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single transaction record from the query.
func (q transactionQuery) One() (*Transaction, error) {
	o := &Transaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for transactions")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Transaction records from the query, and panics on error.
func (q transactionQuery) AllP() TransactionSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Transaction records from the query.
func (q transactionQuery) All() (TransactionSlice, error) {
	var o []*Transaction

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Transaction slice")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Transaction records in the query, and panics on error.
func (q transactionQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Transaction records in the query.
func (q transactionQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count transactions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q transactionQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q transactionQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if transactions exists")
	}

	return count > 0, nil
}

// InvoiceG pointed to by the foreign key.
func (o *Transaction) InvoiceG(mods ...qm.QueryMod) invoiceQuery {
	return o.Invoice(boil.GetDB(), mods...)
}

// Invoice pointed to by the foreign key.
func (o *Transaction) Invoice(exec boil.Executor, mods ...qm.QueryMod) invoiceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.InvoiceID),
	}

	queryMods = append(queryMods, mods...)

	query := Invoices(exec, queryMods...)
	queries.SetFrom(query.Query, "`invoices`")

	return query
}

// PersonG pointed to by the foreign key.
func (o *Transaction) PersonG(mods ...qm.QueryMod) personQuery {
	return o.Person(boil.GetDB(), mods...)
}

// Person pointed to by the foreign key.
func (o *Transaction) Person(exec boil.Executor, mods ...qm.QueryMod) personQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.PersonID),
	}

	queryMods = append(queryMods, mods...)

	query := Persons(exec, queryMods...)
	queries.SetFrom(query.Query, "`persons`")

	return query
}

// UnitG pointed to by the foreign key.
func (o *Transaction) UnitG(mods ...qm.QueryMod) unitQuery {
	return o.Unit(boil.GetDB(), mods...)
}

// Unit pointed to by the foreign key.
func (o *Transaction) Unit(exec boil.Executor, mods ...qm.QueryMod) unitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UnitID),
	}

	queryMods = append(queryMods, mods...)

	query := Units(exec, queryMods...)
	queries.SetFrom(query.Query, "`units`")

	return query
}

// TagsG retrieves all the tag's tags.
func (o *Transaction) TagsG(mods ...qm.QueryMod) tagQuery {
	return o.Tags(boil.GetDB(), mods...)
}

// Tags retrieves all the tag's tags with an executor.
func (o *Transaction) Tags(exec boil.Executor, mods ...qm.QueryMod) tagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`transaction_tags` on `tags`.`id` = `transaction_tags`.`tag_id`"),
		qm.Where("`transaction_tags`.`transaction_id`=?", o.ID),
	)

	query := Tags(exec, queryMods...)
	queries.SetFrom(query.Query, "`tags`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`tags`.*"})
	}

	return query
}

// LoadInvoice allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (transactionL) LoadInvoice(e boil.Executor, singular bool, maybeTransaction interface{}) error {
	var slice []*Transaction
	var object *Transaction

	count := 1
	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args[0] = object.InvoiceID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}
			args[i] = obj.InvoiceID
		}
	}

	query := fmt.Sprintf(
		"select * from `invoices` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Invoice")
	}
	defer results.Close()

	var resultSlice []*Invoice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Invoice")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Invoice = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InvoiceID.Uint == foreign.ID {
				local.R.Invoice = foreign
				break
			}
		}
	}

	return nil
}

// LoadPerson allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (transactionL) LoadPerson(e boil.Executor, singular bool, maybeTransaction interface{}) error {
	var slice []*Transaction
	var object *Transaction

	count := 1
	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args[0] = object.PersonID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}
			args[i] = obj.PersonID
		}
	}

	query := fmt.Sprintf(
		"select * from `persons` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}
	defer results.Close()

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Person = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PersonID == foreign.ID {
				local.R.Person = foreign
				break
			}
		}
	}

	return nil
}

// LoadUnit allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (transactionL) LoadUnit(e boil.Executor, singular bool, maybeTransaction interface{}) error {
	var slice []*Transaction
	var object *Transaction

	count := 1
	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args[0] = object.UnitID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}
			args[i] = obj.UnitID
		}
	}

	query := fmt.Sprintf(
		"select * from `units` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Unit")
	}
	defer results.Close()

	var resultSlice []*Unit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Unit")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Unit = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UnitID.Uint8 == foreign.ID {
				local.R.Unit = foreign
				break
			}
		}
	}

	return nil
}

// LoadTags allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (transactionL) LoadTags(e boil.Executor, singular bool, maybeTransaction interface{}) error {
	var slice []*Transaction
	var object *Transaction

	count := 1
	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select `a`.*, `b`.`transaction_id` from `tags` as `a` inner join `transaction_tags` as `b` on `a`.`id` = `b`.`tag_id` where `b`.`transaction_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tags")
	}
	defer results.Close()

	var resultSlice []*Tag

	var localJoinCols []uint
	for results.Next() {
		one := new(Tag)
		var localJoinCol uint

		err = results.Scan(&one.ID, &one.Tag, &one.Groupby, &localJoinCol)
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice tags")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Err(); err != nil {
		return errors.Wrap(err, "failed to plebian-bind eager loaded slice tags")
	}

	if len(tagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Tags = resultSlice
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Tags = append(local.R.Tags, foreign)
				break
			}
		}
	}

	return nil
}

// SetInvoiceG of the transaction to the related item.
// Sets o.R.Invoice to related.
// Adds o to related.R.Transactions.
// Uses the global database handle.
func (o *Transaction) SetInvoiceG(insert bool, related *Invoice) error {
	return o.SetInvoice(boil.GetDB(), insert, related)
}

// SetInvoiceP of the transaction to the related item.
// Sets o.R.Invoice to related.
// Adds o to related.R.Transactions.
// Panics on error.
func (o *Transaction) SetInvoiceP(exec boil.Executor, insert bool, related *Invoice) {
	if err := o.SetInvoice(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetInvoiceGP of the transaction to the related item.
// Sets o.R.Invoice to related.
// Adds o to related.R.Transactions.
// Uses the global database handle and panics on error.
func (o *Transaction) SetInvoiceGP(insert bool, related *Invoice) {
	if err := o.SetInvoice(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetInvoice of the transaction to the related item.
// Sets o.R.Invoice to related.
// Adds o to related.R.Transactions.
func (o *Transaction) SetInvoice(exec boil.Executor, insert bool, related *Invoice) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `transactions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"invoice_id"}),
		strmangle.WhereClause("`", "`", 0, transactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InvoiceID.Uint = related.ID
	o.InvoiceID.Valid = true

	if o.R == nil {
		o.R = &transactionR{
			Invoice: related,
		}
	} else {
		o.R.Invoice = related
	}

	if related.R == nil {
		related.R = &invoiceR{
			Transactions: TransactionSlice{o},
		}
	} else {
		related.R.Transactions = append(related.R.Transactions, o)
	}

	return nil
}

// RemoveInvoiceG relationship.
// Sets o.R.Invoice to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Transaction) RemoveInvoiceG(related *Invoice) error {
	return o.RemoveInvoice(boil.GetDB(), related)
}

// RemoveInvoiceP relationship.
// Sets o.R.Invoice to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Transaction) RemoveInvoiceP(exec boil.Executor, related *Invoice) {
	if err := o.RemoveInvoice(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveInvoiceGP relationship.
// Sets o.R.Invoice to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Transaction) RemoveInvoiceGP(related *Invoice) {
	if err := o.RemoveInvoice(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveInvoice relationship.
// Sets o.R.Invoice to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Transaction) RemoveInvoice(exec boil.Executor, related *Invoice) error {
	var err error

	o.InvoiceID.Valid = false
	if err = o.Update(exec, "invoice_id"); err != nil {
		o.InvoiceID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Invoice = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Transactions {
		if o.InvoiceID.Uint != ri.InvoiceID.Uint {
			continue
		}

		ln := len(related.R.Transactions)
		if ln > 1 && i < ln-1 {
			related.R.Transactions[i] = related.R.Transactions[ln-1]
		}
		related.R.Transactions = related.R.Transactions[:ln-1]
		break
	}
	return nil
}

// SetPersonG of the transaction to the related item.
// Sets o.R.Person to related.
// Adds o to related.R.Transactions.
// Uses the global database handle.
func (o *Transaction) SetPersonG(insert bool, related *Person) error {
	return o.SetPerson(boil.GetDB(), insert, related)
}

// SetPersonP of the transaction to the related item.
// Sets o.R.Person to related.
// Adds o to related.R.Transactions.
// Panics on error.
func (o *Transaction) SetPersonP(exec boil.Executor, insert bool, related *Person) {
	if err := o.SetPerson(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPersonGP of the transaction to the related item.
// Sets o.R.Person to related.
// Adds o to related.R.Transactions.
// Uses the global database handle and panics on error.
func (o *Transaction) SetPersonGP(insert bool, related *Person) {
	if err := o.SetPerson(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPerson of the transaction to the related item.
// Sets o.R.Person to related.
// Adds o to related.R.Transactions.
func (o *Transaction) SetPerson(exec boil.Executor, insert bool, related *Person) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `transactions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"person_id"}),
		strmangle.WhereClause("`", "`", 0, transactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PersonID = related.ID

	if o.R == nil {
		o.R = &transactionR{
			Person: related,
		}
	} else {
		o.R.Person = related
	}

	if related.R == nil {
		related.R = &personR{
			Transactions: TransactionSlice{o},
		}
	} else {
		related.R.Transactions = append(related.R.Transactions, o)
	}

	return nil
}

// SetUnitG of the transaction to the related item.
// Sets o.R.Unit to related.
// Adds o to related.R.Transactions.
// Uses the global database handle.
func (o *Transaction) SetUnitG(insert bool, related *Unit) error {
	return o.SetUnit(boil.GetDB(), insert, related)
}

// SetUnitP of the transaction to the related item.
// Sets o.R.Unit to related.
// Adds o to related.R.Transactions.
// Panics on error.
func (o *Transaction) SetUnitP(exec boil.Executor, insert bool, related *Unit) {
	if err := o.SetUnit(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUnitGP of the transaction to the related item.
// Sets o.R.Unit to related.
// Adds o to related.R.Transactions.
// Uses the global database handle and panics on error.
func (o *Transaction) SetUnitGP(insert bool, related *Unit) {
	if err := o.SetUnit(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUnit of the transaction to the related item.
// Sets o.R.Unit to related.
// Adds o to related.R.Transactions.
func (o *Transaction) SetUnit(exec boil.Executor, insert bool, related *Unit) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `transactions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"unit_id"}),
		strmangle.WhereClause("`", "`", 0, transactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UnitID.Uint8 = related.ID
	o.UnitID.Valid = true

	if o.R == nil {
		o.R = &transactionR{
			Unit: related,
		}
	} else {
		o.R.Unit = related
	}

	if related.R == nil {
		related.R = &unitR{
			Transactions: TransactionSlice{o},
		}
	} else {
		related.R.Transactions = append(related.R.Transactions, o)
	}

	return nil
}

// RemoveUnitG relationship.
// Sets o.R.Unit to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Transaction) RemoveUnitG(related *Unit) error {
	return o.RemoveUnit(boil.GetDB(), related)
}

// RemoveUnitP relationship.
// Sets o.R.Unit to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Transaction) RemoveUnitP(exec boil.Executor, related *Unit) {
	if err := o.RemoveUnit(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveUnitGP relationship.
// Sets o.R.Unit to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Transaction) RemoveUnitGP(related *Unit) {
	if err := o.RemoveUnit(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveUnit relationship.
// Sets o.R.Unit to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Transaction) RemoveUnit(exec boil.Executor, related *Unit) error {
	var err error

	o.UnitID.Valid = false
	if err = o.Update(exec, "unit_id"); err != nil {
		o.UnitID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Unit = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Transactions {
		if o.UnitID.Uint8 != ri.UnitID.Uint8 {
			continue
		}

		ln := len(related.R.Transactions)
		if ln > 1 && i < ln-1 {
			related.R.Transactions[i] = related.R.Transactions[ln-1]
		}
		related.R.Transactions = related.R.Transactions[:ln-1]
		break
	}
	return nil
}

// AddTagsG adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.Tags.
// Sets related.R.Transactions appropriately.
// Uses the global database handle.
func (o *Transaction) AddTagsG(insert bool, related ...*Tag) error {
	return o.AddTags(boil.GetDB(), insert, related...)
}

// AddTagsP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.Tags.
// Sets related.R.Transactions appropriately.
// Panics on error.
func (o *Transaction) AddTagsP(exec boil.Executor, insert bool, related ...*Tag) {
	if err := o.AddTags(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTagsGP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.Tags.
// Sets related.R.Transactions appropriately.
// Uses the global database handle and panics on error.
func (o *Transaction) AddTagsGP(insert bool, related ...*Tag) {
	if err := o.AddTags(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTags adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.Tags.
// Sets related.R.Transactions appropriately.
func (o *Transaction) AddTags(exec boil.Executor, insert bool, related ...*Tag) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `transaction_tags` (`transaction_id`, `tag_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &transactionR{
			Tags: related,
		}
	} else {
		o.R.Tags = append(o.R.Tags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tagR{
				Transactions: TransactionSlice{o},
			}
		} else {
			rel.R.Transactions = append(rel.R.Transactions, o)
		}
	}
	return nil
}

// SetTagsG removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Transactions's Tags accordingly.
// Replaces o.R.Tags with related.
// Sets related.R.Transactions's Tags accordingly.
// Uses the global database handle.
func (o *Transaction) SetTagsG(insert bool, related ...*Tag) error {
	return o.SetTags(boil.GetDB(), insert, related...)
}

// SetTagsP removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Transactions's Tags accordingly.
// Replaces o.R.Tags with related.
// Sets related.R.Transactions's Tags accordingly.
// Panics on error.
func (o *Transaction) SetTagsP(exec boil.Executor, insert bool, related ...*Tag) {
	if err := o.SetTags(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTagsGP removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Transactions's Tags accordingly.
// Replaces o.R.Tags with related.
// Sets related.R.Transactions's Tags accordingly.
// Uses the global database handle and panics on error.
func (o *Transaction) SetTagsGP(insert bool, related ...*Tag) {
	if err := o.SetTags(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTags removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Transactions's Tags accordingly.
// Replaces o.R.Tags with related.
// Sets related.R.Transactions's Tags accordingly.
func (o *Transaction) SetTags(exec boil.Executor, insert bool, related ...*Tag) error {
	query := "delete from `transaction_tags` where `transaction_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeTagsFromTransactionsSlice(o, related)
	if o.R != nil {
		o.R.Tags = nil
	}
	return o.AddTags(exec, insert, related...)
}

// RemoveTagsG relationships from objects passed in.
// Removes related items from R.Tags (uses pointer comparison, removal does not keep order)
// Sets related.R.Transactions.
// Uses the global database handle.
func (o *Transaction) RemoveTagsG(related ...*Tag) error {
	return o.RemoveTags(boil.GetDB(), related...)
}

// RemoveTagsP relationships from objects passed in.
// Removes related items from R.Tags (uses pointer comparison, removal does not keep order)
// Sets related.R.Transactions.
// Panics on error.
func (o *Transaction) RemoveTagsP(exec boil.Executor, related ...*Tag) {
	if err := o.RemoveTags(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTagsGP relationships from objects passed in.
// Removes related items from R.Tags (uses pointer comparison, removal does not keep order)
// Sets related.R.Transactions.
// Uses the global database handle and panics on error.
func (o *Transaction) RemoveTagsGP(related ...*Tag) {
	if err := o.RemoveTags(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTags relationships from objects passed in.
// Removes related items from R.Tags (uses pointer comparison, removal does not keep order)
// Sets related.R.Transactions.
func (o *Transaction) RemoveTags(exec boil.Executor, related ...*Tag) error {
	var err error
	query := fmt.Sprintf(
		"delete from `transaction_tags` where `transaction_id` = ? and `tag_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeTagsFromTransactionsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Tags {
			if rel != ri {
				continue
			}

			ln := len(o.R.Tags)
			if ln > 1 && i < ln-1 {
				o.R.Tags[i] = o.R.Tags[ln-1]
			}
			o.R.Tags = o.R.Tags[:ln-1]
			break
		}
	}

	return nil
}

func removeTagsFromTransactionsSlice(o *Transaction, related []*Tag) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Transactions {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Transactions)
			if ln > 1 && i < ln-1 {
				rel.R.Transactions[i] = rel.R.Transactions[ln-1]
			}
			rel.R.Transactions = rel.R.Transactions[:ln-1]
			break
		}
	}
}

// TransactionsG retrieves all records.
func TransactionsG(mods ...qm.QueryMod) transactionQuery {
	return Transactions(boil.GetDB(), mods...)
}

// Transactions retrieves all the records using an executor.
func Transactions(exec boil.Executor, mods ...qm.QueryMod) transactionQuery {
	mods = append(mods, qm.From("`transactions`"))
	return transactionQuery{NewQuery(exec, mods...)}
}

// FindTransactionG retrieves a single record by ID.
func FindTransactionG(id uint, selectCols ...string) (*Transaction, error) {
	return FindTransaction(boil.GetDB(), id, selectCols...)
}

// FindTransactionGP retrieves a single record by ID, and panics on error.
func FindTransactionGP(id uint, selectCols ...string) *Transaction {
	retobj, err := FindTransaction(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTransaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransaction(exec boil.Executor, id uint, selectCols ...string) (*Transaction, error) {
	transactionObj := &Transaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `transactions` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(transactionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from transactions")
	}

	return transactionObj, nil
}

// FindTransactionP retrieves a single record by ID with an executor, and panics on error.
func FindTransactionP(exec boil.Executor, id uint, selectCols ...string) *Transaction {
	retobj, err := FindTransaction(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Transaction) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Transaction) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Transaction) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Transaction) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no transactions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	transactionInsertCacheMut.RLock()
	cache, cached := transactionInsertCache[key]
	transactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			transactionColumns,
			transactionColumnsWithDefault,
			transactionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(transactionType, transactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transactionType, transactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `transactions` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `transactions` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `transactions` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, transactionPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into transactions")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == transactionMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for transactions")
	}

CacheNoHooks:
	if !cached {
		transactionInsertCacheMut.Lock()
		transactionInsertCache[key] = cache
		transactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Transaction record. See Update for
// whitelist behavior description.
func (o *Transaction) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Transaction record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Transaction) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Transaction, and panics on error.
// See Update for whitelist behavior description.
func (o *Transaction) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Transaction.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Transaction) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	transactionUpdateCacheMut.RLock()
	cache, cached := transactionUpdateCache[key]
	transactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			transactionColumns,
			transactionPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update transactions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `transactions` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, transactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transactionType, transactionMapping, append(wl, transactionPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update transactions row")
	}

	if !cached {
		transactionUpdateCacheMut.Lock()
		transactionUpdateCache[key] = cache
		transactionUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q transactionQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q transactionQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for transactions")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TransactionSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TransactionSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TransactionSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransactionSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `transactions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in transaction slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Transaction) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Transaction) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Transaction) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Transaction) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no transactions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transactionUpsertCacheMut.RLock()
	cache, cached := transactionUpsertCache[key]
	transactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			transactionColumns,
			transactionColumnsWithDefault,
			transactionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			transactionColumns,
			transactionPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert transactions, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "transactions", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `transactions` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(transactionType, transactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transactionType, transactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for transactions")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == transactionMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for transactions")
	}

CacheNoHooks:
	if !cached {
		transactionUpsertCacheMut.Lock()
		transactionUpsertCache[key] = cache
		transactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Transaction record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Transaction) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Transaction record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Transaction) DeleteG() error {
	if o == nil {
		return errors.New("models: no Transaction provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Transaction record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Transaction) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Transaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Transaction) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Transaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transactionPrimaryKeyMapping)
	sql := "DELETE FROM `transactions` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from transactions")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q transactionQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q transactionQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no transactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from transactions")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TransactionSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o TransactionSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Transaction slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TransactionSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransactionSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Transaction slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(transactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `transactions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from transaction slice")
	}

	if len(transactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Transaction) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Transaction) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Transaction) ReloadG() error {
	if o == nil {
		return errors.New("models: no Transaction provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Transaction) Reload(exec boil.Executor) error {
	ret, err := FindTransaction(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TransactionSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TransactionSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty TransactionSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	transactions := TransactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `transactions`.* FROM `transactions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&transactions)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TransactionSlice")
	}

	*o = transactions

	return nil
}

// TransactionExists checks if the Transaction row exists.
func TransactionExists(exec boil.Executor, id uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `transactions` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if transactions exists")
	}

	return exists, nil
}

// TransactionExistsG checks if the Transaction row exists.
func TransactionExistsG(id uint) (bool, error) {
	return TransactionExists(boil.GetDB(), id)
}

// TransactionExistsGP checks if the Transaction row exists. Panics on error.
func TransactionExistsGP(id uint) bool {
	e, err := TransactionExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TransactionExistsP checks if the Transaction row exists. Panics on error.
func TransactionExistsP(exec boil.Executor, id uint) bool {
	e, err := TransactionExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
