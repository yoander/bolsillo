// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Unit is an object representing the database table.
type Unit struct {
	ID           uint8       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name         string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Symbol       string      `boil:"symbol" json:"symbol" toml:"symbol" yaml:"symbol"`
	UnitID       null.Uint8  `boil:"unit_id" json:"unit_id,omitempty" toml:"unit_id" yaml:"unit_id,omitempty"`
	BaseRelation null.String `boil:"base_relation" json:"base_relation,omitempty" toml:"base_relation" yaml:"base_relation,omitempty"`

	R *unitR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L unitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UnitColumns = struct {
	ID           string
	Name         string
	Symbol       string
	UnitID       string
	BaseRelation string
}{
	ID:           "id",
	Name:         "name",
	Symbol:       "symbol",
	UnitID:       "unit_id",
	BaseRelation: "base_relation",
}

// unitR is where relationships are stored.
type unitR struct {
	Unit         *Unit
	Transactions TransactionSlice
	Units        UnitSlice
}

// unitL is where Load methods for each relationship are stored.
type unitL struct{}

var (
	unitColumns               = []string{"id", "name", "symbol", "unit_id", "base_relation"}
	unitColumnsWithoutDefault = []string{"name", "symbol", "unit_id", "base_relation"}
	unitColumnsWithDefault    = []string{"id"}
	unitPrimaryKeyColumns     = []string{"id"}
)

type (
	// UnitSlice is an alias for a slice of pointers to Unit.
	// This should generally be used opposed to []Unit.
	UnitSlice []*Unit
	// UnitHook is the signature for custom Unit hook methods
	UnitHook func(boil.Executor, *Unit) error

	unitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	unitType                 = reflect.TypeOf(&Unit{})
	unitMapping              = queries.MakeStructMapping(unitType)
	unitPrimaryKeyMapping, _ = queries.BindMapping(unitType, unitMapping, unitPrimaryKeyColumns)
	unitInsertCacheMut       sync.RWMutex
	unitInsertCache          = make(map[string]insertCache)
	unitUpdateCacheMut       sync.RWMutex
	unitUpdateCache          = make(map[string]updateCache)
	unitUpsertCacheMut       sync.RWMutex
	unitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var unitBeforeInsertHooks []UnitHook
var unitBeforeUpdateHooks []UnitHook
var unitBeforeDeleteHooks []UnitHook
var unitBeforeUpsertHooks []UnitHook

var unitAfterInsertHooks []UnitHook
var unitAfterSelectHooks []UnitHook
var unitAfterUpdateHooks []UnitHook
var unitAfterDeleteHooks []UnitHook
var unitAfterUpsertHooks []UnitHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Unit) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range unitBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Unit) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range unitBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Unit) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range unitBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Unit) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range unitBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Unit) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range unitAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Unit) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range unitAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Unit) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range unitAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Unit) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range unitAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Unit) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range unitAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUnitHook registers your hook function for all future operations.
func AddUnitHook(hookPoint boil.HookPoint, unitHook UnitHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		unitBeforeInsertHooks = append(unitBeforeInsertHooks, unitHook)
	case boil.BeforeUpdateHook:
		unitBeforeUpdateHooks = append(unitBeforeUpdateHooks, unitHook)
	case boil.BeforeDeleteHook:
		unitBeforeDeleteHooks = append(unitBeforeDeleteHooks, unitHook)
	case boil.BeforeUpsertHook:
		unitBeforeUpsertHooks = append(unitBeforeUpsertHooks, unitHook)
	case boil.AfterInsertHook:
		unitAfterInsertHooks = append(unitAfterInsertHooks, unitHook)
	case boil.AfterSelectHook:
		unitAfterSelectHooks = append(unitAfterSelectHooks, unitHook)
	case boil.AfterUpdateHook:
		unitAfterUpdateHooks = append(unitAfterUpdateHooks, unitHook)
	case boil.AfterDeleteHook:
		unitAfterDeleteHooks = append(unitAfterDeleteHooks, unitHook)
	case boil.AfterUpsertHook:
		unitAfterUpsertHooks = append(unitAfterUpsertHooks, unitHook)
	}
}

// OneP returns a single unit record from the query, and panics on error.
func (q unitQuery) OneP() *Unit {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single unit record from the query.
func (q unitQuery) One() (*Unit, error) {
	o := &Unit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for units")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Unit records from the query, and panics on error.
func (q unitQuery) AllP() UnitSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Unit records from the query.
func (q unitQuery) All() (UnitSlice, error) {
	var o []*Unit

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Unit slice")
	}

	if len(unitAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Unit records in the query, and panics on error.
func (q unitQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Unit records in the query.
func (q unitQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count units rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q unitQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q unitQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if units exists")
	}

	return count > 0, nil
}

// UnitG pointed to by the foreign key.
func (o *Unit) UnitG(mods ...qm.QueryMod) unitQuery {
	return o.Unit(boil.GetDB(), mods...)
}

// Unit pointed to by the foreign key.
func (o *Unit) Unit(exec boil.Executor, mods ...qm.QueryMod) unitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UnitID),
	}

	queryMods = append(queryMods, mods...)

	query := Units(exec, queryMods...)
	queries.SetFrom(query.Query, "`units`")

	return query
}

// TransactionsG retrieves all the transaction's transactions.
func (o *Unit) TransactionsG(mods ...qm.QueryMod) transactionQuery {
	return o.Transactions(boil.GetDB(), mods...)
}

// Transactions retrieves all the transaction's transactions with an executor.
func (o *Unit) Transactions(exec boil.Executor, mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`transactions`.`unit_id`=?", o.ID),
	)

	query := Transactions(exec, queryMods...)
	queries.SetFrom(query.Query, "`transactions`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`transactions`.*"})
	}

	return query
}

// UnitsG retrieves all the unit's units.
func (o *Unit) UnitsG(mods ...qm.QueryMod) unitQuery {
	return o.Units(boil.GetDB(), mods...)
}

// Units retrieves all the unit's units with an executor.
func (o *Unit) Units(exec boil.Executor, mods ...qm.QueryMod) unitQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`units`.`unit_id`=?", o.ID),
	)

	query := Units(exec, queryMods...)
	queries.SetFrom(query.Query, "`units`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`units`.*"})
	}

	return query
}

// LoadUnit allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (unitL) LoadUnit(e boil.Executor, singular bool, maybeUnit interface{}) error {
	var slice []*Unit
	var object *Unit

	count := 1
	if singular {
		object = maybeUnit.(*Unit)
	} else {
		slice = *maybeUnit.(*[]*Unit)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &unitR{}
		}
		args[0] = object.UnitID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &unitR{}
			}
			args[i] = obj.UnitID
		}
	}

	query := fmt.Sprintf(
		"select * from `units` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Unit")
	}
	defer results.Close()

	var resultSlice []*Unit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Unit")
	}

	if len(unitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Unit = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UnitID.Uint8 == foreign.ID {
				local.R.Unit = foreign
				break
			}
		}
	}

	return nil
}

// LoadTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (unitL) LoadTransactions(e boil.Executor, singular bool, maybeUnit interface{}) error {
	var slice []*Unit
	var object *Unit

	count := 1
	if singular {
		object = maybeUnit.(*Unit)
	} else {
		slice = *maybeUnit.(*[]*Unit)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &unitR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &unitR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `transactions` where `unit_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transactions")
	}
	defer results.Close()

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transactions")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Transactions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UnitID.Uint8 {
				local.R.Transactions = append(local.R.Transactions, foreign)
				break
			}
		}
	}

	return nil
}

// LoadUnits allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (unitL) LoadUnits(e boil.Executor, singular bool, maybeUnit interface{}) error {
	var slice []*Unit
	var object *Unit

	count := 1
	if singular {
		object = maybeUnit.(*Unit)
	} else {
		slice = *maybeUnit.(*[]*Unit)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &unitR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &unitR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `units` where `unit_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load units")
	}
	defer results.Close()

	var resultSlice []*Unit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice units")
	}

	if len(unitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Units = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UnitID.Uint8 {
				local.R.Units = append(local.R.Units, foreign)
				break
			}
		}
	}

	return nil
}

// SetUnitG of the unit to the related item.
// Sets o.R.Unit to related.
// Adds o to related.R.Units.
// Uses the global database handle.
func (o *Unit) SetUnitG(insert bool, related *Unit) error {
	return o.SetUnit(boil.GetDB(), insert, related)
}

// SetUnitP of the unit to the related item.
// Sets o.R.Unit to related.
// Adds o to related.R.Units.
// Panics on error.
func (o *Unit) SetUnitP(exec boil.Executor, insert bool, related *Unit) {
	if err := o.SetUnit(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUnitGP of the unit to the related item.
// Sets o.R.Unit to related.
// Adds o to related.R.Units.
// Uses the global database handle and panics on error.
func (o *Unit) SetUnitGP(insert bool, related *Unit) {
	if err := o.SetUnit(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUnit of the unit to the related item.
// Sets o.R.Unit to related.
// Adds o to related.R.Units.
func (o *Unit) SetUnit(exec boil.Executor, insert bool, related *Unit) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `units` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"unit_id"}),
		strmangle.WhereClause("`", "`", 0, unitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UnitID.Uint8 = related.ID
	o.UnitID.Valid = true

	if o.R == nil {
		o.R = &unitR{
			Unit: related,
		}
	} else {
		o.R.Unit = related
	}

	if related.R == nil {
		related.R = &unitR{
			Units: UnitSlice{o},
		}
	} else {
		related.R.Units = append(related.R.Units, o)
	}

	return nil
}

// RemoveUnitG relationship.
// Sets o.R.Unit to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Unit) RemoveUnitG(related *Unit) error {
	return o.RemoveUnit(boil.GetDB(), related)
}

// RemoveUnitP relationship.
// Sets o.R.Unit to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Unit) RemoveUnitP(exec boil.Executor, related *Unit) {
	if err := o.RemoveUnit(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveUnitGP relationship.
// Sets o.R.Unit to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Unit) RemoveUnitGP(related *Unit) {
	if err := o.RemoveUnit(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveUnit relationship.
// Sets o.R.Unit to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Unit) RemoveUnit(exec boil.Executor, related *Unit) error {
	var err error

	o.UnitID.Valid = false
	if err = o.Update(exec, "unit_id"); err != nil {
		o.UnitID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Unit = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Units {
		if o.UnitID.Uint8 != ri.UnitID.Uint8 {
			continue
		}

		ln := len(related.R.Units)
		if ln > 1 && i < ln-1 {
			related.R.Units[i] = related.R.Units[ln-1]
		}
		related.R.Units = related.R.Units[:ln-1]
		break
	}
	return nil
}

// AddTransactionsG adds the given related objects to the existing relationships
// of the unit, optionally inserting them as new records.
// Appends related to o.R.Transactions.
// Sets related.R.Unit appropriately.
// Uses the global database handle.
func (o *Unit) AddTransactionsG(insert bool, related ...*Transaction) error {
	return o.AddTransactions(boil.GetDB(), insert, related...)
}

// AddTransactionsP adds the given related objects to the existing relationships
// of the unit, optionally inserting them as new records.
// Appends related to o.R.Transactions.
// Sets related.R.Unit appropriately.
// Panics on error.
func (o *Unit) AddTransactionsP(exec boil.Executor, insert bool, related ...*Transaction) {
	if err := o.AddTransactions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTransactionsGP adds the given related objects to the existing relationships
// of the unit, optionally inserting them as new records.
// Appends related to o.R.Transactions.
// Sets related.R.Unit appropriately.
// Uses the global database handle and panics on error.
func (o *Unit) AddTransactionsGP(insert bool, related ...*Transaction) {
	if err := o.AddTransactions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTransactions adds the given related objects to the existing relationships
// of the unit, optionally inserting them as new records.
// Appends related to o.R.Transactions.
// Sets related.R.Unit appropriately.
func (o *Unit) AddTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UnitID.Uint8 = o.ID
			rel.UnitID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `transactions` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"unit_id"}),
				strmangle.WhereClause("`", "`", 0, transactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UnitID.Uint8 = o.ID
			rel.UnitID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &unitR{
			Transactions: related,
		}
	} else {
		o.R.Transactions = append(o.R.Transactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				Unit: o,
			}
		} else {
			rel.R.Unit = o
		}
	}
	return nil
}

// SetTransactionsG removes all previously related items of the
// unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Unit's Transactions accordingly.
// Replaces o.R.Transactions with related.
// Sets related.R.Unit's Transactions accordingly.
// Uses the global database handle.
func (o *Unit) SetTransactionsG(insert bool, related ...*Transaction) error {
	return o.SetTransactions(boil.GetDB(), insert, related...)
}

// SetTransactionsP removes all previously related items of the
// unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Unit's Transactions accordingly.
// Replaces o.R.Transactions with related.
// Sets related.R.Unit's Transactions accordingly.
// Panics on error.
func (o *Unit) SetTransactionsP(exec boil.Executor, insert bool, related ...*Transaction) {
	if err := o.SetTransactions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactionsGP removes all previously related items of the
// unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Unit's Transactions accordingly.
// Replaces o.R.Transactions with related.
// Sets related.R.Unit's Transactions accordingly.
// Uses the global database handle and panics on error.
func (o *Unit) SetTransactionsGP(insert bool, related ...*Transaction) {
	if err := o.SetTransactions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactions removes all previously related items of the
// unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Unit's Transactions accordingly.
// Replaces o.R.Transactions with related.
// Sets related.R.Unit's Transactions accordingly.
func (o *Unit) SetTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	query := "update `transactions` set `unit_id` = null where `unit_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Transactions {
			rel.UnitID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Unit = nil
		}

		o.R.Transactions = nil
	}
	return o.AddTransactions(exec, insert, related...)
}

// RemoveTransactionsG relationships from objects passed in.
// Removes related items from R.Transactions (uses pointer comparison, removal does not keep order)
// Sets related.R.Unit.
// Uses the global database handle.
func (o *Unit) RemoveTransactionsG(related ...*Transaction) error {
	return o.RemoveTransactions(boil.GetDB(), related...)
}

// RemoveTransactionsP relationships from objects passed in.
// Removes related items from R.Transactions (uses pointer comparison, removal does not keep order)
// Sets related.R.Unit.
// Panics on error.
func (o *Unit) RemoveTransactionsP(exec boil.Executor, related ...*Transaction) {
	if err := o.RemoveTransactions(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTransactionsGP relationships from objects passed in.
// Removes related items from R.Transactions (uses pointer comparison, removal does not keep order)
// Sets related.R.Unit.
// Uses the global database handle and panics on error.
func (o *Unit) RemoveTransactionsGP(related ...*Transaction) {
	if err := o.RemoveTransactions(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTransactions relationships from objects passed in.
// Removes related items from R.Transactions (uses pointer comparison, removal does not keep order)
// Sets related.R.Unit.
func (o *Unit) RemoveTransactions(exec boil.Executor, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		rel.UnitID.Valid = false
		if rel.R != nil {
			rel.R.Unit = nil
		}
		if err = rel.Update(exec, "unit_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Transactions {
			if rel != ri {
				continue
			}

			ln := len(o.R.Transactions)
			if ln > 1 && i < ln-1 {
				o.R.Transactions[i] = o.R.Transactions[ln-1]
			}
			o.R.Transactions = o.R.Transactions[:ln-1]
			break
		}
	}

	return nil
}

// AddUnitsG adds the given related objects to the existing relationships
// of the unit, optionally inserting them as new records.
// Appends related to o.R.Units.
// Sets related.R.Unit appropriately.
// Uses the global database handle.
func (o *Unit) AddUnitsG(insert bool, related ...*Unit) error {
	return o.AddUnits(boil.GetDB(), insert, related...)
}

// AddUnitsP adds the given related objects to the existing relationships
// of the unit, optionally inserting them as new records.
// Appends related to o.R.Units.
// Sets related.R.Unit appropriately.
// Panics on error.
func (o *Unit) AddUnitsP(exec boil.Executor, insert bool, related ...*Unit) {
	if err := o.AddUnits(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUnitsGP adds the given related objects to the existing relationships
// of the unit, optionally inserting them as new records.
// Appends related to o.R.Units.
// Sets related.R.Unit appropriately.
// Uses the global database handle and panics on error.
func (o *Unit) AddUnitsGP(insert bool, related ...*Unit) {
	if err := o.AddUnits(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUnits adds the given related objects to the existing relationships
// of the unit, optionally inserting them as new records.
// Appends related to o.R.Units.
// Sets related.R.Unit appropriately.
func (o *Unit) AddUnits(exec boil.Executor, insert bool, related ...*Unit) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UnitID.Uint8 = o.ID
			rel.UnitID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `units` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"unit_id"}),
				strmangle.WhereClause("`", "`", 0, unitPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UnitID.Uint8 = o.ID
			rel.UnitID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &unitR{
			Units: related,
		}
	} else {
		o.R.Units = append(o.R.Units, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &unitR{
				Unit: o,
			}
		} else {
			rel.R.Unit = o
		}
	}
	return nil
}

// SetUnitsG removes all previously related items of the
// unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Unit's Units accordingly.
// Replaces o.R.Units with related.
// Sets related.R.Unit's Units accordingly.
// Uses the global database handle.
func (o *Unit) SetUnitsG(insert bool, related ...*Unit) error {
	return o.SetUnits(boil.GetDB(), insert, related...)
}

// SetUnitsP removes all previously related items of the
// unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Unit's Units accordingly.
// Replaces o.R.Units with related.
// Sets related.R.Unit's Units accordingly.
// Panics on error.
func (o *Unit) SetUnitsP(exec boil.Executor, insert bool, related ...*Unit) {
	if err := o.SetUnits(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUnitsGP removes all previously related items of the
// unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Unit's Units accordingly.
// Replaces o.R.Units with related.
// Sets related.R.Unit's Units accordingly.
// Uses the global database handle and panics on error.
func (o *Unit) SetUnitsGP(insert bool, related ...*Unit) {
	if err := o.SetUnits(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUnits removes all previously related items of the
// unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Unit's Units accordingly.
// Replaces o.R.Units with related.
// Sets related.R.Unit's Units accordingly.
func (o *Unit) SetUnits(exec boil.Executor, insert bool, related ...*Unit) error {
	query := "update `units` set `unit_id` = null where `unit_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Units {
			rel.UnitID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Unit = nil
		}

		o.R.Units = nil
	}
	return o.AddUnits(exec, insert, related...)
}

// RemoveUnitsG relationships from objects passed in.
// Removes related items from R.Units (uses pointer comparison, removal does not keep order)
// Sets related.R.Unit.
// Uses the global database handle.
func (o *Unit) RemoveUnitsG(related ...*Unit) error {
	return o.RemoveUnits(boil.GetDB(), related...)
}

// RemoveUnitsP relationships from objects passed in.
// Removes related items from R.Units (uses pointer comparison, removal does not keep order)
// Sets related.R.Unit.
// Panics on error.
func (o *Unit) RemoveUnitsP(exec boil.Executor, related ...*Unit) {
	if err := o.RemoveUnits(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveUnitsGP relationships from objects passed in.
// Removes related items from R.Units (uses pointer comparison, removal does not keep order)
// Sets related.R.Unit.
// Uses the global database handle and panics on error.
func (o *Unit) RemoveUnitsGP(related ...*Unit) {
	if err := o.RemoveUnits(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveUnits relationships from objects passed in.
// Removes related items from R.Units (uses pointer comparison, removal does not keep order)
// Sets related.R.Unit.
func (o *Unit) RemoveUnits(exec boil.Executor, related ...*Unit) error {
	var err error
	for _, rel := range related {
		rel.UnitID.Valid = false
		if rel.R != nil {
			rel.R.Unit = nil
		}
		if err = rel.Update(exec, "unit_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Units {
			if rel != ri {
				continue
			}

			ln := len(o.R.Units)
			if ln > 1 && i < ln-1 {
				o.R.Units[i] = o.R.Units[ln-1]
			}
			o.R.Units = o.R.Units[:ln-1]
			break
		}
	}

	return nil
}

// UnitsG retrieves all records.
func UnitsG(mods ...qm.QueryMod) unitQuery {
	return Units(boil.GetDB(), mods...)
}

// Units retrieves all the records using an executor.
func Units(exec boil.Executor, mods ...qm.QueryMod) unitQuery {
	mods = append(mods, qm.From("`units`"))
	return unitQuery{NewQuery(exec, mods...)}
}

// FindUnitG retrieves a single record by ID.
func FindUnitG(id uint8, selectCols ...string) (*Unit, error) {
	return FindUnit(boil.GetDB(), id, selectCols...)
}

// FindUnitGP retrieves a single record by ID, and panics on error.
func FindUnitGP(id uint8, selectCols ...string) *Unit {
	retobj, err := FindUnit(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUnit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUnit(exec boil.Executor, id uint8, selectCols ...string) (*Unit, error) {
	unitObj := &Unit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `units` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(unitObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from units")
	}

	return unitObj, nil
}

// FindUnitP retrieves a single record by ID with an executor, and panics on error.
func FindUnitP(exec boil.Executor, id uint8, selectCols ...string) *Unit {
	retobj, err := FindUnit(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Unit) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Unit) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Unit) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Unit) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no units provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(unitColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	unitInsertCacheMut.RLock()
	cache, cached := unitInsertCache[key]
	unitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			unitColumns,
			unitColumnsWithDefault,
			unitColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(unitType, unitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(unitType, unitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `units` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `units` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `units` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, unitPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into units")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint8(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == unitMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for units")
	}

CacheNoHooks:
	if !cached {
		unitInsertCacheMut.Lock()
		unitInsertCache[key] = cache
		unitInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Unit record. See Update for
// whitelist behavior description.
func (o *Unit) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Unit record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Unit) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Unit, and panics on error.
// See Update for whitelist behavior description.
func (o *Unit) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Unit.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Unit) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	unitUpdateCacheMut.RLock()
	cache, cached := unitUpdateCache[key]
	unitUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			unitColumns,
			unitPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update units, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `units` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, unitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(unitType, unitMapping, append(wl, unitPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update units row")
	}

	if !cached {
		unitUpdateCacheMut.Lock()
		unitUpdateCache[key] = cache
		unitUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q unitQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q unitQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for units")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UnitSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UnitSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UnitSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UnitSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), unitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `units` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, unitPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in unit slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Unit) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Unit) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Unit) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Unit) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no units provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(unitColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	unitUpsertCacheMut.RLock()
	cache, cached := unitUpsertCache[key]
	unitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			unitColumns,
			unitColumnsWithDefault,
			unitColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			unitColumns,
			unitPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert units, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "units", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `units` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(unitType, unitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(unitType, unitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for units")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint8(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == unitMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for units")
	}

CacheNoHooks:
	if !cached {
		unitUpsertCacheMut.Lock()
		unitUpsertCache[key] = cache
		unitUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Unit record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Unit) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Unit record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Unit) DeleteG() error {
	if o == nil {
		return errors.New("models: no Unit provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Unit record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Unit) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Unit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Unit) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Unit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), unitPrimaryKeyMapping)
	sql := "DELETE FROM `units` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from units")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q unitQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q unitQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no unitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from units")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UnitSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o UnitSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Unit slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UnitSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UnitSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Unit slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(unitBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), unitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `units` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, unitPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from unit slice")
	}

	if len(unitAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Unit) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Unit) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Unit) ReloadG() error {
	if o == nil {
		return errors.New("models: no Unit provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Unit) Reload(exec boil.Executor) error {
	ret, err := FindUnit(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UnitSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UnitSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UnitSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UnitSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UnitSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	units := UnitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), unitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `units`.* FROM `units` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, unitPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&units)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UnitSlice")
	}

	*o = units

	return nil
}

// UnitExists checks if the Unit row exists.
func UnitExists(exec boil.Executor, id uint8) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `units` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if units exists")
	}

	return exists, nil
}

// UnitExistsG checks if the Unit row exists.
func UnitExistsG(id uint8) (bool, error) {
	return UnitExists(boil.GetDB(), id)
}

// UnitExistsGP checks if the Unit row exists. Panics on error.
func UnitExistsGP(id uint8) bool {
	e, err := UnitExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UnitExistsP checks if the Unit row exists. Panics on error.
func UnitExistsP(exec boil.Executor, id uint8) bool {
	e, err := UnitExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
