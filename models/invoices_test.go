// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testInvoices(t *testing.T) {
	t.Parallel()

	query := Invoices(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testInvoicesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	invoice := &Invoice{}
	if err = randomize.Struct(seed, invoice, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = invoice.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = invoice.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Invoices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvoicesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	invoice := &Invoice{}
	if err = randomize.Struct(seed, invoice, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = invoice.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Invoices(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Invoices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvoicesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	invoice := &Invoice{}
	if err = randomize.Struct(seed, invoice, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = invoice.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := InvoiceSlice{invoice}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Invoices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testInvoicesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	invoice := &Invoice{}
	if err = randomize.Struct(seed, invoice, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = invoice.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := InvoiceExists(tx, invoice.ID)
	if err != nil {
		t.Errorf("Unable to check if Invoice exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InvoiceExistsG to return true, but got false.")
	}
}
func testInvoicesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	invoice := &Invoice{}
	if err = randomize.Struct(seed, invoice, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = invoice.Insert(tx); err != nil {
		t.Error(err)
	}

	invoiceFound, err := FindInvoice(tx, invoice.ID)
	if err != nil {
		t.Error(err)
	}

	if invoiceFound == nil {
		t.Error("want a record, got nil")
	}
}
func testInvoicesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	invoice := &Invoice{}
	if err = randomize.Struct(seed, invoice, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = invoice.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Invoices(tx).Bind(invoice); err != nil {
		t.Error(err)
	}
}

func testInvoicesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	invoice := &Invoice{}
	if err = randomize.Struct(seed, invoice, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = invoice.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Invoices(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInvoicesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	invoiceOne := &Invoice{}
	invoiceTwo := &Invoice{}
	if err = randomize.Struct(seed, invoiceOne, invoiceDBTypes, false, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}
	if err = randomize.Struct(seed, invoiceTwo, invoiceDBTypes, false, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = invoiceOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = invoiceTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Invoices(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInvoicesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	invoiceOne := &Invoice{}
	invoiceTwo := &Invoice{}
	if err = randomize.Struct(seed, invoiceOne, invoiceDBTypes, false, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}
	if err = randomize.Struct(seed, invoiceTwo, invoiceDBTypes, false, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = invoiceOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = invoiceTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Invoices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func invoiceBeforeInsertHook(e boil.Executor, o *Invoice) error {
	*o = Invoice{}
	return nil
}

func invoiceAfterInsertHook(e boil.Executor, o *Invoice) error {
	*o = Invoice{}
	return nil
}

func invoiceAfterSelectHook(e boil.Executor, o *Invoice) error {
	*o = Invoice{}
	return nil
}

func invoiceBeforeUpdateHook(e boil.Executor, o *Invoice) error {
	*o = Invoice{}
	return nil
}

func invoiceAfterUpdateHook(e boil.Executor, o *Invoice) error {
	*o = Invoice{}
	return nil
}

func invoiceBeforeDeleteHook(e boil.Executor, o *Invoice) error {
	*o = Invoice{}
	return nil
}

func invoiceAfterDeleteHook(e boil.Executor, o *Invoice) error {
	*o = Invoice{}
	return nil
}

func invoiceBeforeUpsertHook(e boil.Executor, o *Invoice) error {
	*o = Invoice{}
	return nil
}

func invoiceAfterUpsertHook(e boil.Executor, o *Invoice) error {
	*o = Invoice{}
	return nil
}

func testInvoicesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Invoice{}
	o := &Invoice{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, invoiceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Invoice object: %s", err)
	}

	AddInvoiceHook(boil.BeforeInsertHook, invoiceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	invoiceBeforeInsertHooks = []InvoiceHook{}

	AddInvoiceHook(boil.AfterInsertHook, invoiceAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	invoiceAfterInsertHooks = []InvoiceHook{}

	AddInvoiceHook(boil.AfterSelectHook, invoiceAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	invoiceAfterSelectHooks = []InvoiceHook{}

	AddInvoiceHook(boil.BeforeUpdateHook, invoiceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	invoiceBeforeUpdateHooks = []InvoiceHook{}

	AddInvoiceHook(boil.AfterUpdateHook, invoiceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	invoiceAfterUpdateHooks = []InvoiceHook{}

	AddInvoiceHook(boil.BeforeDeleteHook, invoiceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	invoiceBeforeDeleteHooks = []InvoiceHook{}

	AddInvoiceHook(boil.AfterDeleteHook, invoiceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	invoiceAfterDeleteHooks = []InvoiceHook{}

	AddInvoiceHook(boil.BeforeUpsertHook, invoiceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	invoiceBeforeUpsertHooks = []InvoiceHook{}

	AddInvoiceHook(boil.AfterUpsertHook, invoiceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	invoiceAfterUpsertHooks = []InvoiceHook{}
}
func testInvoicesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	invoice := &Invoice{}
	if err = randomize.Struct(seed, invoice, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = invoice.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Invoices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInvoicesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	invoice := &Invoice{}
	if err = randomize.Struct(seed, invoice, invoiceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = invoice.Insert(tx, invoiceColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Invoices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInvoiceToManyTransactions(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Invoice
	var b, c Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, transactionDBTypes, false, transactionColumnsWithDefault...)
	randomize.Struct(seed, &c, transactionDBTypes, false, transactionColumnsWithDefault...)

	b.InvoiceID.Valid = true
	c.InvoiceID.Valid = true
	b.InvoiceID.Uint = a.ID
	c.InvoiceID.Uint = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	transaction, err := a.Transactions(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range transaction {
		if v.InvoiceID.Uint == b.InvoiceID.Uint {
			bFound = true
		}
		if v.InvoiceID.Uint == c.InvoiceID.Uint {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := InvoiceSlice{&a}
	if err = a.L.LoadTransactions(tx, false, (*[]*Invoice)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Transactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Transactions = nil
	if err = a.L.LoadTransactions(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Transactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", transaction)
	}
}

func testInvoiceToManyAddOpTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Invoice
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invoiceDBTypes, false, strmangle.SetComplement(invoicePrimaryKeyColumns, invoiceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Transaction{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTransactions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.InvoiceID.Uint {
			t.Error("foreign key was wrong value", a.ID, first.InvoiceID.Uint)
		}
		if a.ID != second.InvoiceID.Uint {
			t.Error("foreign key was wrong value", a.ID, second.InvoiceID.Uint)
		}

		if first.R.Invoice != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Invoice != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Transactions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Transactions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Transactions(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testInvoiceToManySetOpTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Invoice
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invoiceDBTypes, false, strmangle.SetComplement(invoicePrimaryKeyColumns, invoiceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetTransactions(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Transactions(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTransactions(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Transactions(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.InvoiceID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.InvoiceID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.InvoiceID.Uint {
		t.Error("foreign key was wrong value", a.ID, d.InvoiceID.Uint)
	}
	if a.ID != e.InvoiceID.Uint {
		t.Error("foreign key was wrong value", a.ID, e.InvoiceID.Uint)
	}

	if b.R.Invoice != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Invoice != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Invoice != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Invoice != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Transactions[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Transactions[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testInvoiceToManyRemoveOpTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Invoice
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invoiceDBTypes, false, strmangle.SetComplement(invoicePrimaryKeyColumns, invoiceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddTransactions(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Transactions(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTransactions(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Transactions(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.InvoiceID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.InvoiceID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Invoice != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Invoice != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Invoice != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Invoice != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Transactions) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Transactions[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Transactions[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testInvoicesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	invoice := &Invoice{}
	if err = randomize.Struct(seed, invoice, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = invoice.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = invoice.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testInvoicesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	invoice := &Invoice{}
	if err = randomize.Struct(seed, invoice, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = invoice.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := InvoiceSlice{invoice}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testInvoicesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	invoice := &Invoice{}
	if err = randomize.Struct(seed, invoice, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = invoice.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Invoices(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	invoiceDBTypes = map[string]string{`Code`: `varchar`, `CreatedAt`: `datetime`, `Date`: `date`, `Deleted`: `tinyint`, `DeletedAt`: `datetime`, `FilePath`: `varchar`, `ID`: `int`, `UpdatedAt`: `datetime`}
	_              = bytes.MinRead
)

func testInvoicesUpdate(t *testing.T) {
	t.Parallel()

	if len(invoiceColumns) == len(invoicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	invoice := &Invoice{}
	if err = randomize.Struct(seed, invoice, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = invoice.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Invoices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, invoice, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	if err = invoice.Update(tx); err != nil {
		t.Error(err)
	}
}

func testInvoicesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(invoiceColumns) == len(invoicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	invoice := &Invoice{}
	if err = randomize.Struct(seed, invoice, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = invoice.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Invoices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, invoice, invoiceDBTypes, true, invoicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(invoiceColumns, invoicePrimaryKeyColumns) {
		fields = invoiceColumns
	} else {
		fields = strmangle.SetComplement(
			invoiceColumns,
			invoicePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(invoice))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := InvoiceSlice{invoice}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testInvoicesUpsert(t *testing.T) {
	t.Parallel()

	if len(invoiceColumns) == len(invoicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	invoice := Invoice{}
	if err = randomize.Struct(seed, &invoice, invoiceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = invoice.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Invoice: %s", err)
	}

	count, err := Invoices(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &invoice, invoiceDBTypes, false, invoicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	if err = invoice.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Invoice: %s", err)
	}

	count, err = Invoices(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
